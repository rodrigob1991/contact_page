import { NonEmptyArray } from "./types";
export declare const getFileContent: (path: string) => Promise<string>;
export declare const getSplitFileContent: <S extends NonEmptyArray<string>>(path: string, separators: S) => Promise<S extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T ? T extends R ? T extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_1 ? T_1 extends R ? T_1 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_2 ? T_2 extends R ? T_2 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_3 ? T_3 extends R ? T_3 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_4 ? T_4 extends R ? T_4 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_5 ? T_5 extends R ? T_5 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_6 ? T_6 extends R ? T_6 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_7 ? T_7 extends R ? T_7 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_8 ? T_8 extends R ? T_8 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? (R extends infer T_9 ? T_9 extends R ? T_9 extends [infer F, ...infer R] ? R extends NonEmptyArray<string> ? any[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never : never : never)[] : string[] : never>;
