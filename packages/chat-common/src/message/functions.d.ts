import { CommonMessagePartsPositions, GotAllMessageParts, GotMessageParts, Message, MessagePartsPositions } from "./types";
type AnyMessagePartsPositions<M extends Message, CMPP extends CommonMessagePartsPositions<M>, MPP = M["positions"]> = {
    [K in CMPP]: K extends keyof MPP ? MPP[K] : never;
};
type LastPosition<MPP extends MessagePartsPositions, LASTS = [4, 3, 2, 1]> = LASTS extends [infer LAST, ...infer REST] ? LAST extends MPP[keyof MPP] ? LAST : LastPosition<MPP, REST> : never;
export declare const getMessage: <M extends Message<import("../model/types").UserType, import("../model/types").MessageFlow, import("../model/types").MessagePrefix<import("../model/types").MessageFlow>>>(parts: GotAllMessageParts<M>) => M["template"];
export declare const getMessagePrefix: <M extends `con:${number}` | `dis:${number}` | `mes:${number}:${string}` | `con:${number}:${number}` | `dis:${number}:${number}` | `mes:${number}:${number}:${string}` | `user-ack:con:${number}` | `user-ack:dis:${number}` | `user-ack:mes:${number}` | `user-ack:server-ack:${number}` | `user-ack:user-ack:${number}` | `user-ack:con:${number}:${number}` | `user-ack:dis:${number}:${number}` | `user-ack:mes:${number}:${number}` | `user-ack:server-ack:${number}:${number}` | `user-ack:user-ack:${number}:${number}` | `server-ack:${number}:${number}` | `server-ack:${number}` | `user-ack:${number}:${number}` | `user-ack:${number}`>(m: M) => M extends `${infer MP}:${any}` ? MP : never;
export declare const getMessageParts: <M extends Message<import("../model/types").UserType, import("../model/types").MessageFlow, import("../model/types").MessagePrefix<import("../model/types").MessageFlow>>, CMPP extends M["parts"] extends infer T ? T extends M["parts"] ? T extends keyof M["positions"] ? (1 extends infer T_1 ? T_1 extends 1 ? T_1 extends M["positions"][T] ? Exclude<M["positions"][T], T_1> extends never ? T : never : never : never : never) | (2 extends infer T_2 ? T_2 extends 2 ? T_2 extends M["positions"][T] ? Exclude<M["positions"][T], T_2> extends never ? T : never : never : never : never) | (3 extends infer T_3 ? T_3 extends 3 ? T_3 extends M["positions"][T] ? Exclude<M["positions"][T], T_3> extends never ? T : never : never : never : never) | (4 extends infer T_4 ? T_4 extends 4 ? T_4 extends M["positions"][T] ? Exclude<M["positions"][T], T_4> extends never ? T : never : never : never : never) : never : never : never = M["parts"] extends infer T ? T extends M["parts"] ? T extends keyof M["positions"] ? (1 extends infer T_1 ? T_1 extends 1 ? T_1 extends M["positions"][T] ? Exclude<M["positions"][T], T_1> extends never ? T : never : never : never : never) | (2 extends infer T_2 ? T_2 extends 2 ? T_2 extends M["positions"][T] ? Exclude<M["positions"][T], T_2> extends never ? T : never : never : never : never) | (3 extends infer T_3 ? T_3 extends 3 ? T_3 extends M["positions"][T] ? Exclude<M["positions"][T], T_3> extends never ? T : never : never : never : never) | (4 extends infer T_4 ? T_4 extends 4 ? T_4 extends M["positions"][T] ? Exclude<M["positions"][T], T_4> extends never ? T : never : never : never : never) : never : never : never>(m: M["template"], whatGet: AnyMessagePartsPositions<M, CMPP, M["positions"]>) => GotMessageParts<M, CMPP>;
export declare const getCutMessage: <M extends Message<import("../model/types").UserType, import("../model/types").MessageFlow, import("../model/types").MessagePrefix<import("../model/types").MessageFlow>>, CMPP extends M["parts"] extends infer T ? T extends M["parts"] ? T extends keyof M["positions"] ? (1 extends infer T_1 ? T_1 extends 1 ? T_1 extends M["positions"][T] ? Exclude<M["positions"][T], T_1> extends never ? T : never : never : never : never) | (2 extends infer T_2 ? T_2 extends 2 ? T_2 extends M["positions"][T] ? Exclude<M["positions"][T], T_2> extends never ? T : never : never : never : never) | (3 extends infer T_3 ? T_3 extends 3 ? T_3 extends M["positions"][T] ? Exclude<M["positions"][T], T_3> extends never ? T : never : never : never : never) | (4 extends infer T_4 ? T_4 extends 4 ? T_4 extends M["positions"][T] ? Exclude<M["positions"][T], T_4> extends never ? T : never : never : never : never) : never : never : never, MPP extends M["positions"] = M["positions"]>(m: M["template"], whatCut: AnyMessagePartsPositions<M, CMPP, M["positions"]>, lastPosition: 4 extends infer T_5 ? T_5 extends 4 ? T_5 extends MPP[keyof MPP] ? T_5 : 3 extends infer T_6 ? T_6 extends 3 ? T_6 extends MPP[keyof MPP] ? T_6 : 2 extends infer T_7 ? T_7 extends 2 ? T_7 extends MPP[keyof MPP] ? T_7 : 1 extends infer T_8 ? T_8 extends 1 ? T_8 extends MPP[keyof MPP] ? T_8 : never : never : never : never : never : never : never : never : never) => M extends Message<import("../model/types").UserType, import("../model/types").MessageFlow, import("../model/types").MessagePrefix<import("../model/types").MessageFlow>> ? `${M["prefix"]}${"originPrefix" extends infer T_9 ? T_9 extends "originPrefix" ? T_9 extends Exclude<M["parts"], CMPP> ? `:${import("../model/types").MessageParts[T_9]}` : "" : never : never}${"number" extends infer T_10 ? T_10 extends "number" ? T_10 extends Exclude<M["parts"], CMPP> ? `:${import("../model/types").MessageParts[T_10]}` : "" : never : never}${"guessId" extends infer T_11 ? T_11 extends "guessId" ? T_11 extends Exclude<M["parts"], CMPP> ? `:${import("../model/types").MessageParts[T_11]}` : "" : never : never}${"body" extends infer T_12 ? T_12 extends "body" ? T_12 extends Exclude<M["parts"], CMPP> ? `:${import("../model/types").MessageParts[T_12]}` : "" : never : never}` : never;
export {};
