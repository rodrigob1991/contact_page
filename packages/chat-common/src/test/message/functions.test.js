"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const constants_1 = require("../../model/constants");
const functions_1 = require("../../message/functions");
const { con: conPrefix, dis: disPrefix, mes: mesPrefix, ack: ackPrefix } = constants_1.messagePrefixes;
const hardcodeParts = { originPrefix: "mes", number: 2346544, guessId: 1522, body: "something to say" };
const { originPrefix, number, guessId, body } = hardcodeParts;
const equalParts = (expectedParts, gotParts, prefix, userType, flow) => {
    (0, globals_1.test)(`message parts do not matches the message ${flow}bound ${prefix} ${userType}`, () => {
        (0, globals_1.expect)(expectedParts).toEqual(gotParts);
    });
};
const conToGuessMessage = `${conPrefix}:${number}`;
const expectedConToGuessMessageParts = { prefix: conPrefix, number: number };
const gotConToGuessMessageParts = (0, functions_1.getMessageParts)(conToGuessMessage, { prefix: 1, number: 2 });
equalParts(expectedConToGuessMessageParts, gotConToGuessMessageParts, "con", "guess", "out");
const disToGuessMessage = `${disPrefix}:${number}`;
const expectedDisToGuessMessageParts = { prefix: disPrefix, number: number };
const gotDisToGuessMessageParts = (0, functions_1.getMessageParts)(disToGuessMessage, { prefix: 1, number: 2 });
equalParts(expectedDisToGuessMessageParts, gotDisToGuessMessageParts, "dis", "guess", "out");
const mesToGuessMessage = `${mesPrefix}:${number}:${body}`;
const expectedMesToGuessMessageParts = { prefix: mesPrefix, number: number, body: body };
const gotMesToGuessMessageParts = (0, functions_1.getMessageParts)(mesToGuessMessage, { prefix: 1, number: 2, body: 3 });
equalParts(expectedMesToGuessMessageParts, gotMesToGuessMessageParts, "mes", "guess", "out");
const ackToGuessMessage = `${ackPrefix}:${number}`;
const expectedAckToGuessMessageParts = { prefix: ackPrefix, number: number };
const gotAckToGuessMessageParts = (0, functions_1.getMessageParts)(ackToGuessMessage, { prefix: 1, number: 2 });
equalParts(expectedAckToGuessMessageParts, gotAckToGuessMessageParts, "ack", "guess", "out");
const conToHostMessage = `${conPrefix}:${number}:${guessId}`;
const expectedConToHostMessageParts = { prefix: conPrefix, number: number, guessId: guessId };
const gotConToHostMessageParts = (0, functions_1.getMessageParts)(conToHostMessage, { prefix: 1, number: 2, guessId: 3 });
equalParts(expectedConToHostMessageParts, gotConToHostMessageParts, "con", "host", "out");
const disToHostMessage = `${disPrefix}:${number}:${guessId}`;
const expectedDisToHostMessageParts = { prefix: disPrefix, number: number, guessId: guessId };
const gotDisToHostMessageParts = (0, functions_1.getMessageParts)(disToHostMessage, { prefix: 1, number: 2, guessId: 3 });
equalParts(expectedDisToHostMessageParts, gotDisToHostMessageParts, "dis", "host", "out");
const mesToHostMessage = `${mesPrefix}:${number}:${guessId}:${body}`;
const expectedMesToHostMessageParts = { prefix: mesPrefix, number: number, guessId: guessId, body: body };
const gotMesToHostMessageParts = (0, functions_1.getMessageParts)(mesToHostMessage, { prefix: 1, number: 2, guessId: 3, body: 4 });
equalParts(expectedMesToHostMessageParts, gotMesToHostMessageParts, "mes", "host", "out");
const ackToHostMessage = `${ackPrefix}:${number}:${guessId}`;
const expectedAckToHostMessageParts = { prefix: ackPrefix, number: number, guessId: guessId };
const gotAckToHostMessageParts = (0, functions_1.getMessageParts)(ackToHostMessage, { prefix: 1, number: 2, guessId: 3 });
equalParts(expectedAckToHostMessageParts, gotAckToHostMessageParts, "ack", "host", "out");
const mesFromGuessMessage = `${mesPrefix}:${number}:${body}`;
const expectedMesFromGuessMessageParts = { prefix: mesPrefix, number: number, body: body };
const gotMesFromGuessMessageParts = (0, functions_1.getMessageParts)(mesFromGuessMessage, { prefix: 1, number: 2, body: 3 });
equalParts(expectedMesFromGuessMessageParts, gotMesFromGuessMessageParts, "mes", "guess", "in");
const ackFromGuessMessage = `${ackPrefix}:${originPrefix}:${number}`;
const expectedAckFromGuessMessageParts = { prefix: ackPrefix, originPrefix: originPrefix, number: number };
const gotAckFromGuessMessageParts = (0, functions_1.getMessageParts)(ackFromGuessMessage, { prefix: 1, originPrefix: 2, number: 3 });
equalParts(expectedAckFromGuessMessageParts, gotAckFromGuessMessageParts, "ack", "guess", "in");
const mesFromHostMessage = `${mesPrefix}:${number}:${guessId}:${body}`;
const expectedMesFromHostMessageParts = { prefix: mesPrefix, number: number, guessId: guessId, body: body };
const gotMesFromHostMessageParts = (0, functions_1.getMessageParts)(mesFromHostMessage, { prefix: 1, number: 2, guessId: 3, body: 4 });
equalParts(expectedMesFromHostMessageParts, gotMesFromHostMessageParts, "mes", "host", "in");
const ackFromHostMessage = `${ackPrefix}:${originPrefix}:${number}:${guessId}`;
const expectedAckFromHostMessageParts = { prefix: ackPrefix, originPrefix: originPrefix, number: number, guessId: guessId };
const gotAckFromHostMessageParts = (0, functions_1.getMessageParts)(ackFromHostMessage, { prefix: 1, originPrefix: 2, number: 3, guessId: 4 });
equalParts(expectedAckFromHostMessageParts, gotAckFromHostMessageParts, "ack", "host", "in");
